import os
import re

OUTPUT_FILE = "qcs.h"

AUTHOR = "SegusFaultise / Zakk Wilson-Christian"
DATE = "2025-10-06"
LICENSE = """
/*
 * The MIT License (MIT)
 * * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
"""

SRC_FILES = [
    "src/complex.c",
    "src/q_utils.c",
    "src/q_matrix.c",
    "src/q_state.c",
    "src/q_gates.c",
    "src/qsc.c",
]

API_HEADERS = [
    "src/internal.h",
    "include/qcs.h",
]

EXCLUDE_INCLUDES = [
    '#include "internal.h"',
    '#include "qcs.h"',
    '#include "../include/qcs.h"',
    '#include <math.h>',
    '#include <stdio.h>',
    '#include <stdlib.h>',
    '#include <string.h>',
    '#include <unistd.h>',
    '#include <sys/time.h>',
    '#include <time.h>',
    '#include <stddef.h>',
]


def clean_content(content, filename):
    """
    Applies C89 comment fixes and removes internal includes.
    All user-defined functions, including qc_strdup, are preserved.
    """

    content = re.sub(r'(?<![:/])//', r'/*', content)

    lines = content.splitlines()
    cleaned_lines = []

    for line in lines:
        stripped_line = line.strip()

        if stripped_line in EXCLUDE_INCLUDES:
            continue

        if not stripped_line and not any(l.strip() for l in cleaned_lines if l.strip()):
            continue

        cleaned_lines.append(line)

    return '\n'.join(cleaned_lines)


def get_header_api(filename):
    """Extracts declarations and structs from header files, removing includes and guards."""
    try:
        with open(filename, 'r') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Error: Header file not found at {filename}")
        return ""

    content = re.sub(r'#ifndef\s+\w+\n', '', content)
    content = re.sub(r'#define\s+\w+\n', '', content)
    content = re.sub(r'#endif\s*.*', '', content)

    content = content.replace(
        "struct __attribute__((aligned(64))) t_q_matrix", "struct t_q_matrix")
    for inc in EXCLUDE_INCLUDES:
        content = content.replace(inc, '')

    return content


def bundle_library():
    """Main bundling function that generates qcs_single.h."""
    print(f"Starting bundle process. Output: {OUTPUT_FILE}")

    output = f"""
/*
 * Quantum Computing Simulator (QCS) - Single Header Library
 *
 * File: {OUTPUT_FILE}
 * Generated: {DATE}
 * Author: {AUTHOR}
 * Auto-Generated by bundle.py
 */
{LICENSE}

#ifndef QCS_SINGLE_H
#define QCS_SINGLE_H

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

/* ========================================================================= */
/* API FUNCTION DECLARATIONS AND STRUCTURES (from internal.h and qcs.h)      */
/* ========================================================================= */

"""

    for h_file in API_HEADERS:
        print(f"  - Reading API from {h_file}...")
        output += get_header_api(h_file)

    output += """

/* ========================================================================= */
/* IMPLEMENTATION (Define QCS_IMPLEMENTATION in ONE C source file to include */
/* definitions)                                                              */
/* ========================================================================= */
#ifdef QCS_IMPLEMENTATION

"""

    for c_file in SRC_FILES:
        print(f"  - Reading implementation from {c_file}...")
        try:
            with open(c_file, 'r') as f:
                content = f.read()
        except FileNotFoundError:
            print(f"Error: Source file not found at {
                  c_file}. Check your directory structure.")
            return

        output += f"\n/* ------------------------------------------------------------------------- */\n"
        output += f"/* {os.path.basename(
            c_file)} implementation                                         */\n"
        output += f"/* ------------------------------------------------------------------------- */\n\n"

        output += clean_content(content, c_file)

    output += """

#endif /* QCS_IMPLEMENTATION */
#endif /* QCS_SINGLE_H */
"""

    with open(OUTPUT_FILE, 'w') as f:
        f.write(output)

    print(f"\nGenerated qcs single header library: {OUTPUT_FILE}")


if __name__ == "__main__":
    bundle_library()
